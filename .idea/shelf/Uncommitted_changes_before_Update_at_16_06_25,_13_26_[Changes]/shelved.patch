Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>garage-management-api</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <java.version>17</java.version>\n        <maven.compiler.source>17</maven.compiler.source>\n        <maven.compiler.target>17</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <spring-boot.version>3.2.0</spring-boot.version>\n    </properties>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.2.0</version>\n        <relativePath/>\n    </parent>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.mysql</groupId>\n            <artifactId>mysql-connector-j</artifactId>\n            <version>8.0.33</version>\n            <scope>runtime</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-validation</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.datatype</groupId>\n            <artifactId>jackson-datatype-jsr310</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <scope>provided</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springdoc</groupId>\n            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n            <version>2.2.0</version>\n        </dependency>\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 5241592a02f29d8f70acba6185b856ed0136a5c9)
+++ b/pom.xml	(date 1750080983880)
@@ -47,6 +47,19 @@
             <artifactId>spring-boot-starter-validation</artifactId>
         </dependency>
 
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.h2database</groupId>
+            <artifactId>h2</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+
         <dependency>
             <groupId>com.fasterxml.jackson.datatype</groupId>
             <artifactId>jackson-datatype-jsr310</artifactId>
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.url=jdbc:mysql://127.0.0.1:3306/garage_api?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Sao_Paulo\nspring.datasource.username=root\nspring.datasource.password=senhadb\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\nspring.jpa.open-in-view=false\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\nspring.jackson.serialization.write-dates-as-timestamps=false\nspring.jackson.time-zone=America/Sao_Paulo\nserver.port=8080\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 5241592a02f29d8f70acba6185b856ed0136a5c9)
+++ b/src/main/resources/application.properties	(date 1750079376616)
@@ -1,6 +1,6 @@
 spring.datasource.url=jdbc:mysql://127.0.0.1:3306/garage_api?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Sao_Paulo
 spring.datasource.username=root
-spring.datasource.password=senhadb
+spring.datasource.password=12345678root
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.show-sql=true
 spring.jpa.properties.hibernate.format_sql=true
Index: src/test/java/org/example/garagemanagementapi/controller/PricingServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/garagemanagementapi/controller/PricingServiceTest.java b/src/test/java/org/example/garagemanagementapi/controller/PricingServiceTest.java
new file mode 100644
--- /dev/null	(date 1750081856513)
+++ b/src/test/java/org/example/garagemanagementapi/controller/PricingServiceTest.java	(date 1750081856513)
@@ -0,0 +1,22 @@
+package org.example.garagemanagementapi.service;
+
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class PricingServiceTest {
+
+    private PricingService pricingService = new PricingService();
+
+    @Test
+    public void testCalculatePriceWithLowOccupancy() {
+        // Exemplo: totalSpots = 100, freeSpots = 80 (80% livre, ou 20% ocupado), 10% de desconto
+        long minutesParked = 60; // Não utilizado nesta lógica simples
+        int totalSpots = 100;
+        int freeSpots = 80;
+        double basePrice = 10.0;
+        double expectedPrice = basePrice * 0.9; // 10% de desconto
+
+        double calculatedPrice = pricingService.calculatePrice(minutesParked, totalSpots, freeSpots, basePrice);
+        assertEquals(expectedPrice, calculatedPrice, 0.01);
+    }
+}
Index: src/test/resources/application-test.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/test/resources/application-test.properties b/src/test/resources/application-test.properties
new file mode 100644
--- /dev/null	(date 1750081105249)
+++ b/src/test/resources/application-test.properties	(date 1750081105249)
@@ -0,0 +1,6 @@
+spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
+spring.datasource.driverClassName=org.h2.Driver
+spring.datasource.username=sa
+spring.datasource.password=
+spring.jpa.hibernate.ddl-auto=create-drop
+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
Index: src/test/java/org/example/garagemanagementapi/controller/BillingServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/garagemanagementapi/controller/BillingServiceTest.java b/src/test/java/org/example/garagemanagementapi/controller/BillingServiceTest.java
new file mode 100644
--- /dev/null	(date 1750084128708)
+++ b/src/test/java/org/example/garagemanagementapi/controller/BillingServiceTest.java	(date 1750084128708)
@@ -0,0 +1,25 @@
+package org.example.garagemanagementapi.controller;
+
+import org.example.garagemanagementapi.service.BillingService;
+import org.example.garagemanagementapi.service.PricingService;
+import org.junit.jupiter.api.Test;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+public class BillingServiceTest {
+
+    // Se BillingService injeta PricingService, você pode instanciar ambos manualmente
+    private PricingService pricingService = new PricingService();
+    private BillingService billingService = new BillingService(pricingService); // supondo um construtor que recebe PricingService
+
+    @Test
+    public void testCalculateCharge() {
+        long minutesParked = 60;
+        int totalSpots = 100;
+        int freeSpots = 80;
+        double basePrice = 10.0;
+        double expectedCharge = basePrice * 0.9;
+
+        double actualCharge = billingService.calculateCharge(minutesParked, totalSpots, freeSpots, basePrice);
+        assertEquals(expectedCharge, actualCharge, 0.0001);
+    }
+}
Index: src/main/java/org/example/garagemanagementapi/service/PricingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/garagemanagementapi/service/PricingService.java b/src/main/java/org/example/garagemanagementapi/service/PricingService.java
new file mode 100644
--- /dev/null	(date 1750082268664)
+++ b/src/main/java/org/example/garagemanagementapi/service/PricingService.java	(date 1750082268664)
@@ -0,0 +1,27 @@
+package org.example.garagemanagementapi.service;
+
+import org.springframework.stereotype.Service;
+
+@Service
+public class PricingService {
+
+    /**
+     * Calcula o preço com base na quantidade de minutos estacionados, total de vagas,
+     * vagas livres e o preço base.
+     *
+     * Este método é apenas um exemplo inicial. Ajuste a lógica conforme as regras de negócio.
+     *
+     * @param minutes    minutos estacionados
+     * @param totalSpots número total de vagas
+     * @param freeSpots  número de vagas livres
+     * @param basePrice  preço base
+     * @return preço calculado (com desconto, se aplicável)
+     */
+    public double calculatePrice(long minutes, int totalSpots, int freeSpots, double basePrice) {
+        // Exemplo simples: se a proporção de vagas livres for maior ou igual a 20%, aplica 10% de desconto.
+        if (((double) freeSpots / totalSpots) >= 0.2) {
+            return basePrice * 0.9;
+        }
+        return basePrice;
+    }
+}
Index: src/test/java/org/example/garagemanagementapi/controller/WebhookControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/garagemanagementapi/controller/WebhookControllerTest.java b/src/test/java/org/example/garagemanagementapi/controller/WebhookControllerTest.java
new file mode 100644
--- /dev/null	(date 1750081798815)
+++ b/src/test/java/org/example/garagemanagementapi/controller/WebhookControllerTest.java	(date 1750081798815)
@@ -0,0 +1,57 @@
+package org.example.garagemanagementapi.controller;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.example.garagemanagementapi.dto.WebhookEvent;
+import org.example.garagemanagementapi.model.Vehicle;
+import org.example.garagemanagementapi.repository.VehicleRepository;
+import org.example.garagemanagementapi.repository.SpotRepository;
+import org.junit.jupiter.api.Test;
+import org.mockito.Mockito;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.http.MediaType;
+import org.springframework.test.web.servlet.MockMvc;
+
+import java.time.LocalDateTime;
+
+import static org.hamcrest.Matchers.containsString;
+import static org.mockito.ArgumentMatchers.any;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
+
+@WebMvcTest(WebhookController.class)
+public class WebhookControllerTest {
+
+    @Autowired
+    private MockMvc mockMvc;
+
+    @Autowired
+    private ObjectMapper objectMapper;
+
+    @MockBean
+    private VehicleRepository vehicleRepository;
+
+    @MockBean
+    private SpotRepository spotRepository;
+
+    // Supondo que seu endpoint trate o evento "ENTRY"
+    @Test
+    public void testHandleEntryEvent() throws Exception {
+        WebhookEvent event = new WebhookEvent();
+        event.setEvent("ENTRY");
+        event.setLicensePlate("ABC123");
+        // Configure os demais atributos se necessário
+
+        Vehicle savedVehicle = new Vehicle();
+        savedVehicle.setLicensePlate("ABC123");
+        savedVehicle.setEntryTime(LocalDateTime.now());
+        Mockito.when(vehicleRepository.save(any(Vehicle.class))).thenReturn(savedVehicle);
+
+        mockMvc.perform(post("/webhook")
+                        .contentType(MediaType.APPLICATION_JSON)
+                        .content(objectMapper.writeValueAsString(event)))
+                .andExpect(status().isCreated())
+                .andExpect(content().string(containsString("Vehicle entry recorded")));
+    }
+}
Index: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst b/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst
--- a/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst	(revision 5241592a02f29d8f70acba6185b856ed0136a5c9)
+++ b/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst	(date 1750083372118)
@@ -1,0 +1,3 @@
+/Users/marianeferreiradosanjos/garage-management-api/src/test/java/org/example/garagemanagementapi/controller/repository/SpotRepositoryTest.java
+/Users/marianeferreiradosanjos/garage-management-api/src/test/java/org/example/garagemanagementapi/controller/PricingServiceTest.java
+/Users/marianeferreiradosanjos/garage-management-api/src/test/java/org/example/garagemanagementapi/controller/WebhookControllerTest.java
Index: target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst b/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst
--- a/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst	(revision 5241592a02f29d8f70acba6185b856ed0136a5c9)
+++ b/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/createdFiles.lst	(date 1750083372483)
@@ -1,0 +1,3 @@
+org/example/garagemanagementapi/service/PricingServiceTest.class
+org/example/garagemanagementapi/controller/repository/SpotRepositoryTest.class
+org/example/garagemanagementapi/controller/WebhookControllerTest.class
Index: src/main/java/org/example/garagemanagementapi/service/BillingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/garagemanagementapi/service/BillingService.java b/src/main/java/org/example/garagemanagementapi/service/BillingService.java
new file mode 100644
--- /dev/null	(date 1750084128712)
+++ b/src/main/java/org/example/garagemanagementapi/service/BillingService.java	(date 1750084128712)
@@ -0,0 +1,29 @@
+package org.example.garagemanagementapi.service;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+@Service
+public class BillingService {
+
+    private final PricingService pricingService;
+
+    @Autowired  // Injeção de dependência do PricingService
+    public BillingService(PricingService pricingService) {
+        this.pricingService = pricingService;
+    }
+
+    /**
+     * Calcula a cobrança para um veículo.
+     *
+     * @param minutesParked minutos estacionados
+     * @param totalSpots número total de vagas
+     * @param freeSpots número de vagas livres
+     * @param basePrice preço base da vaga
+     * @return valor calculado com base na lógica do PricingService
+     */
+    public double calculateCharge(long minutesParked, int totalSpots, int freeSpots, double basePrice) {
+        // Essa simples delegação pode ser expandida para incluir outras regras se necessário.
+        return pricingService.calculatePrice(minutesParked, totalSpots, freeSpots, basePrice);
+    }
+}
Index: target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/GarageManagementApiApplication.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/controller/PlateExitController.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/model/Spot.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/controller/RevenueController.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/controller/ParkedController.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/controller/PlateStatusController.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/dto/RevenueResponse.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/dto/WebhookEvent.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/dto/PlateStatusRequest.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/controller/WebhookController.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/repository/VehicleRepository.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/repository/SpotRepository.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/dto/PlateStatusResponse.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/controller/SpotController.java\n/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/model/Vehicle.java\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst b/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst
--- a/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst	(revision 5241592a02f29d8f70acba6185b856ed0136a5c9)
+++ b/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst	(date 1750083370989)
@@ -10,6 +10,7 @@
 /Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/controller/WebhookController.java
 /Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/repository/VehicleRepository.java
 /Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/repository/SpotRepository.java
+/Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/service/PricingService.java
 /Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/dto/PlateStatusResponse.java
 /Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/controller/SpotController.java
 /Users/marianeferreiradosanjos/garage-management-api/src/main/java/org/example/garagemanagementapi/model/Vehicle.java
Index: src/test/java/org/example/garagemanagementapi/controller/repository/SpotRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/org/example/garagemanagementapi/controller/repository/SpotRepositoryTest.java b/src/test/java/org/example/garagemanagementapi/controller/repository/SpotRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1750081585830)
+++ b/src/test/java/org/example/garagemanagementapi/controller/repository/SpotRepositoryTest.java	(date 1750081585830)
@@ -0,0 +1,33 @@
+package org.example.garagemanagementapi.controller.repository;
+
+import org.example.garagemanagementapi.model.Spot;
+import org.example.garagemanagementapi.repository.SpotRepository;
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
+import org.springframework.test.annotation.Rollback;
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.util.Optional;
+
+@DataJpaTest
+public class SpotRepositoryTest {
+
+    @Autowired
+    private SpotRepository spotRepository;
+
+    @Test
+    @Rollback(false)
+    public void testFindByLatAndLng() {
+        Spot spot = new Spot();
+        spot.setLat(-23.561684);
+        spot.setLng(-46.625378);
+        spot.setOccupied(false);
+        spot.setLicensePlate(null);
+        spotRepository.save(spot);
+
+        Optional<Spot> found = spotRepository.findByLatAndLng(spot.getLat(), spot.getLng());
+        assertThat(found).isPresent();
+        assertThat(found.get().getOccupied()).isFalse();
+    }
+}
Index: target/classes/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.datasource.url=jdbc:mysql://127.0.0.1:3306/garage_api?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Sao_Paulo\nspring.datasource.username=root\nspring.datasource.password=senhadb\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\nspring.jpa.open-in-view=false\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\nspring.jackson.serialization.write-dates-as-timestamps=false\nspring.jackson.time-zone=America/Sao_Paulo\nserver.port=8080\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/classes/application.properties b/target/classes/application.properties
--- a/target/classes/application.properties	(revision 5241592a02f29d8f70acba6185b856ed0136a5c9)
+++ b/target/classes/application.properties	(date 1750080998123)
@@ -1,6 +1,6 @@
 spring.datasource.url=jdbc:mysql://127.0.0.1:3306/garage_api?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Sao_Paulo
 spring.datasource.username=root
-spring.datasource.password=senhadb
+spring.datasource.password=12345678root
 spring.jpa.hibernate.ddl-auto=update
 spring.jpa.show-sql=true
 spring.jpa.properties.hibernate.format_sql=true
